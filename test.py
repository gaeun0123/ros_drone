import numpy as np

def expand_maze_zero_filled(obstacles):
    maze_100x100 = np.zeros((100, 100), dtype=int)  # 100x100 크기의 0으로 채워진 배열 생성
    
    # 장애물의 위치를 1로 설정
    for (x, y) in obstacles:
        # 좌표가 100x100 크기에 맞게 scaling 되어있는지 확인
        if x < 100 and y < 100:
            maze_100x100[y, x] = 1
        else:
            print(f"Invalid obstacle coordinates: ({x}, {y})")  # 범위를 벗어난 좌표에 대한 경고 메시지
    
    return maze_100x100.tolist()

# 장애물의 위치 좌표 리스트
obstacles = [(16,16),(16,17),(16,18),(16,19),(16,20),(16,21),(16,22),(16,23),(16,24),(16,25),
	      (17,16),(17,17),(17,18),(17,19),(17,20),(17,21),(17,22),(17,23),(17,24),(17,25),
	      (18,16),(18,17),(18,18),(18,19),(18,20),(18,21),(18,22),(18,23),(18,24),(18,25),
	      (19,16),(19,17),(19,18),(19,19),(19,20),(19,21),(19,22),(19,23),(19,24),(19,25),
	      (20,16),(20,17),(20,18),(20,19),(20,20),(20,21),(20,22),(20,23),(20,24),(20,25),
	      (21,16),(21,17),(21,18),(21,19),(21,20),(21,21),(21,22),(21,23),(21,24),(21,25),
	      (22,16),(22,17),(22,18),(22,19),(22,20),(22,21),(22,22),(22,23),(22,24),(22,25),
	      (23,16),(23,17),(23,18),(23,19),(23,20),(23,21),(23,22),(23,23),(23,24),(23,25),
	      (24,16),(24,17),(24,18),(24,19),(24,20),(24,21),(24,22),(24,23),(24,24),(24,25),
	      (25,16),(25,17),(25,18),(25,19),(25,20),(25,21),(25,22),(25,23),(25,24),(25,25)]  

maze_200x200 = expand_maze_zero_filled(obstacles)

# 새로운 200x200 maze를 drone_configs에 추가
drone_configs = {
    "uav0": {
        "maze": maze_200x200,
        "start": (0,0),
        "end": (199,199)
    },
    "uav1": {
        "maze": maze_200x200,
        "start": (0,0),
        "end": (199,199)
    }
}